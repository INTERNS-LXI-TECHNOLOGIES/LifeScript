package com.lxisoft.emergencyalert.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmergencyContactAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmergencyContactAllPropertiesEquals(EmergencyContact expected, EmergencyContact actual) {
        assertEmergencyContactAutoGeneratedPropertiesEquals(expected, actual);
        assertEmergencyContactAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmergencyContactAllUpdatablePropertiesEquals(EmergencyContact expected, EmergencyContact actual) {
        assertEmergencyContactUpdatableFieldsEquals(expected, actual);
        assertEmergencyContactUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmergencyContactAutoGeneratedPropertiesEquals(EmergencyContact expected, EmergencyContact actual) {
        assertThat(expected)
            .as("Verify EmergencyContact auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmergencyContactUpdatableFieldsEquals(EmergencyContact expected, EmergencyContact actual) {
        assertThat(expected)
            .as("Verify EmergencyContact relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmergencyContactUpdatableRelationshipsEquals(EmergencyContact expected, EmergencyContact actual) {
        assertThat(expected)
            .as("Verify EmergencyContact relationships")
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()));
    }
}

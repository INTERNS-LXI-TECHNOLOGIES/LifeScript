package com.lxisoft.emergencyalert.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GpsEntryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGpsEntryAllPropertiesEquals(GpsEntry expected, GpsEntry actual) {
        assertGpsEntryAutoGeneratedPropertiesEquals(expected, actual);
        assertGpsEntryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGpsEntryAllUpdatablePropertiesEquals(GpsEntry expected, GpsEntry actual) {
        assertGpsEntryUpdatableFieldsEquals(expected, actual);
        assertGpsEntryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGpsEntryAutoGeneratedPropertiesEquals(GpsEntry expected, GpsEntry actual) {
        assertThat(expected)
            .as("Verify GpsEntry auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGpsEntryUpdatableFieldsEquals(GpsEntry expected, GpsEntry actual) {
        assertThat(expected)
            .as("Verify GpsEntry relevant properties")
            .satisfies(e -> assertThat(e.getLatitude()).as("check latitude").isEqualTo(actual.getLatitude()))
            .satisfies(e -> assertThat(e.getLongitude()).as("check longitude").isEqualTo(actual.getLongitude()))
            .satisfies(e -> assertThat(e.getTimestamp()).as("check timestamp").isEqualTo(actual.getTimestamp()))
            .satisfies(e -> assertThat(e.getDeviceId()).as("check deviceId").isEqualTo(actual.getDeviceId()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGpsEntryUpdatableRelationshipsEquals(GpsEntry expected, GpsEntry actual) {
        assertThat(expected)
            .as("Verify GpsEntry relationships")
            .satisfies(e -> assertThat(e.getChild()).as("check child").isEqualTo(actual.getChild()));
    }
}

package com.diviso.habittrackbackend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HabitTrackAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackAllPropertiesEquals(HabitTrack expected, HabitTrack actual) {
        assertHabitTrackAutoGeneratedPropertiesEquals(expected, actual);
        assertHabitTrackAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackAllUpdatablePropertiesEquals(HabitTrack expected, HabitTrack actual) {
        assertHabitTrackUpdatableFieldsEquals(expected, actual);
        assertHabitTrackUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackAutoGeneratedPropertiesEquals(HabitTrack expected, HabitTrack actual) {
        assertThat(expected)
            .as("Verify HabitTrack auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackUpdatableFieldsEquals(HabitTrack expected, HabitTrack actual) {
        assertThat(expected)
            .as("Verify HabitTrack relevant properties")
            .satisfies(e -> assertThat(e.getHabitId()).as("check habitId").isEqualTo(actual.getHabitId()))
            .satisfies(e -> assertThat(e.getHabitName()).as("check habitName").isEqualTo(actual.getHabitName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackUpdatableRelationshipsEquals(HabitTrack expected, HabitTrack actual) {
        // empty method
    }
}

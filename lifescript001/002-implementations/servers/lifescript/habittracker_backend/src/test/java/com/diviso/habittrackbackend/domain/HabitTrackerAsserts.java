package com.diviso.habittrackbackend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HabitTrackerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackerAllPropertiesEquals(HabitTracker expected, HabitTracker actual) {
        assertHabitTrackerAutoGeneratedPropertiesEquals(expected, actual);
        assertHabitTrackerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackerAllUpdatablePropertiesEquals(HabitTracker expected, HabitTracker actual) {
        assertHabitTrackerUpdatableFieldsEquals(expected, actual);
        assertHabitTrackerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackerAutoGeneratedPropertiesEquals(HabitTracker expected, HabitTracker actual) {
        assertThat(expected)
            .as("Verify HabitTracker auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackerUpdatableFieldsEquals(HabitTracker expected, HabitTracker actual) {
        assertThat(expected)
            .as("Verify HabitTracker relevant properties")
            .satisfies(e -> assertThat(e.getHabitId()).as("check habitId").isEqualTo(actual.getHabitId()))
            .satisfies(e -> assertThat(e.getHabitName()).as("check habitName").isEqualTo(actual.getHabitName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHabitTrackerUpdatableRelationshipsEquals(HabitTracker expected, HabitTracker actual) {
        // empty method
    }
}

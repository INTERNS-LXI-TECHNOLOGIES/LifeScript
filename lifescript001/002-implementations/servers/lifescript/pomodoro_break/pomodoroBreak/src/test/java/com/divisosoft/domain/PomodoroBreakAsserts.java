package com.divisosoft.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PomodoroBreakAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPomodoroBreakAllPropertiesEquals(PomodoroBreak expected, PomodoroBreak actual) {
        assertPomodoroBreakAutoGeneratedPropertiesEquals(expected, actual);
        assertPomodoroBreakAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPomodoroBreakAllUpdatablePropertiesEquals(PomodoroBreak expected, PomodoroBreak actual) {
        assertPomodoroBreakUpdatableFieldsEquals(expected, actual);
        assertPomodoroBreakUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPomodoroBreakAutoGeneratedPropertiesEquals(PomodoroBreak expected, PomodoroBreak actual) {
        assertThat(expected)
            .as("Verify PomodoroBreak auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPomodoroBreakUpdatableFieldsEquals(PomodoroBreak expected, PomodoroBreak actual) {
        assertThat(expected)
            .as("Verify PomodoroBreak relevant properties")
            .satisfies(e -> assertThat(e.getUserName()).as("check userName").isEqualTo(actual.getUserName()))
            .satisfies(e -> assertThat(e.getTotalWorkingHour()).as("check totalWorkingHour").isEqualTo(actual.getTotalWorkingHour()))
            .satisfies(e ->
                assertThat(e.getDailyDurationOfWork()).as("check dailyDurationOfWork").isEqualTo(actual.getDailyDurationOfWork())
            )
            .satisfies(e -> assertThat(e.getSplitBreakDuration()).as("check splitBreakDuration").isEqualTo(actual.getSplitBreakDuration()))
            .satisfies(e -> assertThat(e.getBreakDuration()).as("check breakDuration").isEqualTo(actual.getBreakDuration()))
            .satisfies(e -> assertThat(e.getCompletedBreaks()).as("check completedBreaks").isEqualTo(actual.getCompletedBreaks()))
            .satisfies(e -> assertThat(e.getDateOfPomodoro()).as("check dateOfPomodoro").isEqualTo(actual.getDateOfPomodoro()))
            .satisfies(e ->
                assertThat(e.getTimeOfPomodoroCreation()).as("check timeOfPomodoroCreation").isEqualTo(actual.getTimeOfPomodoroCreation())
            )
            .satisfies(e ->
                assertThat(e.getNotificationForBreak()).as("check notificationForBreak").isEqualTo(actual.getNotificationForBreak())
            )
            .satisfies(e -> assertThat(e.getFinalMessage()).as("check finalMessage").isEqualTo(actual.getFinalMessage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPomodoroBreakUpdatableRelationshipsEquals(PomodoroBreak expected, PomodoroBreak actual) {
        // empty method
    }
}

package com.diviso.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TwisterPracticeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTwisterPracticeAllPropertiesEquals(TwisterPractice expected, TwisterPractice actual) {
        assertTwisterPracticeAutoGeneratedPropertiesEquals(expected, actual);
        assertTwisterPracticeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTwisterPracticeAllUpdatablePropertiesEquals(TwisterPractice expected, TwisterPractice actual) {
        assertTwisterPracticeUpdatableFieldsEquals(expected, actual);
        assertTwisterPracticeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTwisterPracticeAutoGeneratedPropertiesEquals(TwisterPractice expected, TwisterPractice actual) {
        assertThat(expected)
            .as("Verify TwisterPractice auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTwisterPracticeUpdatableFieldsEquals(TwisterPractice expected, TwisterPractice actual) {
        assertThat(expected)
            .as("Verify TwisterPractice relevant properties")
            .satisfies(e -> assertThat(e.getScore()).as("check score").isEqualTo(actual.getScore()))
            .satisfies(e -> assertThat(e.getTimesPracticed()).as("check timesPracticed").isEqualTo(actual.getTimesPracticed()))
            .satisfies(e -> assertThat(e.getCorrections()).as("check corrections").isEqualTo(actual.getCorrections()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTwisterPracticeUpdatableRelationshipsEquals(TwisterPractice expected, TwisterPractice actual) {
        assertThat(expected)
            .as("Verify TwisterPractice relationships")
            .satisfies(e -> assertThat(e.getMediaContent()).as("check mediaContent").isEqualTo(actual.getMediaContent()));
    }
}

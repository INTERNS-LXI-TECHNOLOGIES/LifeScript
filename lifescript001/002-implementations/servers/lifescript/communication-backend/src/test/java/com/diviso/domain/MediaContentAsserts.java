package com.diviso.domain;

import static com.diviso.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MediaContentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaContentAllPropertiesEquals(MediaContent expected, MediaContent actual) {
        assertMediaContentAutoGeneratedPropertiesEquals(expected, actual);
        assertMediaContentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaContentAllUpdatablePropertiesEquals(MediaContent expected, MediaContent actual) {
        assertMediaContentUpdatableFieldsEquals(expected, actual);
        assertMediaContentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaContentAutoGeneratedPropertiesEquals(MediaContent expected, MediaContent actual) {
        assertThat(expected)
            .as("Verify MediaContent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaContentUpdatableFieldsEquals(MediaContent expected, MediaContent actual) {
        assertThat(expected)
            .as("Verify MediaContent relevant properties")
            .satisfies(e -> assertThat(e.getText()).as("check text").isEqualTo(actual.getText()))
            .satisfies(e -> assertThat(e.getAudio()).as("check audio").isEqualTo(actual.getAudio()))
            .satisfies(e -> assertThat(e.getAudioContentType()).as("check audio contenty type").isEqualTo(actual.getAudioContentType()))
            .satisfies(e ->
                assertThat(e.getUploadDateTime())
                    .as("check uploadDateTime")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getUploadDateTime())
            )
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()))
            .satisfies(e -> assertThat(e.getDifficultyLevel()).as("check difficultyLevel").isEqualTo(actual.getDifficultyLevel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMediaContentUpdatableRelationshipsEquals(MediaContent expected, MediaContent actual) {
        // empty method
    }
}
